#!/usr/bin/env python3
'''
Script to be used on the command line, it uses the first 
argument to search for modules on pypi websearch
'''

from re import findall, IGNORECASE
from requests import get, models
from typing import List
import sys

class Results:

    def __init__(self, q):
        self.q = q
        self.results = self.get_results()

    def __repr__(self) -> str:
        return ''.join(self.results)

    def get_results(self) -> List[str]:
        response = self._get_response()
        # Scrapes for name, version and description from the html received
        # from requests.get using re.findall. The ideal would be to use 
        # re.finditer to lazily grab only the five results that I want
        names = findall('<span class="package-snippet__name">*' + \
                '(.*)</span>', response,IGNORECASE)
        versions = findall('<span class="package-snippet__version">*' + \
                '(.*)</span>', response,IGNORECASE)
        descr = findall('<p class="package-snippet__description">*' + \
                '(.*)</p>', response,IGNORECASE)

        # Returns a list of str, where the module name is colored green by the
        # ANSI escape sequence in the terminal, with version number and
        # small description in a new line
        return [f"\033[1;32m{names[i]}\033[00m {versions[i]}\n    {descr[i]}\n"
                for i in range(5)]

    def _get_response(self) -> models.Response:
        # Returns the response from requests.get to be scraped with a findall 
        # or finditer from the re module
        return get('https://pypi.org/search/?q=' + self.q).text



def pypi_help():
    print('''
    Usage:  pypi_search STRING
            pypi_search [OPTION]
    
    --help                      prints this help
    ''')

if __name__ == '__main__':

    # Exits if no argument was passed
    if len(sys.argv) < 2:
        print('\nEmpty search string.\n')
        pypi_help()
        sys.exit(1)
    elif sys.argv[1] == '--help':
        pypi_help()
        sys.exit()

    q = sys.argv[1]
    print(Results(q))
