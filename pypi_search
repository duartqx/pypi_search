#!/usr/bin/env python3
'''
Script to be used on the command line, it uses the first 
argument to search for modules on pypi websearch
'''

from re import findall, IGNORECASE
from urllib.request import urlopen
from typing import List, Generator as Gen
from sys import argv, exit as _exit

class Results:

    def __init__(self, q):
        self.q: str = q
        self.response: str = self.get_response()
        self.results: str = self.get_results()

    def __repr__(self) -> str:
        return self.results

    def get_response(self) -> str:
        # Returns the decoded data from a response got with 
        # urllib.request.urlopen to be scraped with a re.findall or re.finditer
        URL_BASE: str = 'https://pypi.org/search/?q='
        response: str = urlopen(URL_BASE + self.q).read().decode('UTF-8')
        return response

    def get_results(self) -> str:
        ''' Scrapes for name, version and description from the html received
        from _get_response() using re.findall. The ideal would be to use 
        re.finditer to lazily grab only the five results that I want '''

        n_pattern = '<span class="package-snippet__name">*(.*)</span>'
        v_pattern = '<span class="package-snippet__version">*(.*)</span>'
        d_pattern = '<p class="package-snippet__description">*(.*)</p>'

        na: List[str] = findall(n_pattern, self.response) # List of Names
        ve: List[str] = findall(v_pattern, self.response) # List of Versions
        de: List[str] = findall(d_pattern, self.response) # List of Descrip.

        try:
            # Returns a str, where the module name is colored green by the
            # ANSI escape sequence in the terminal, with version number and
            # small description in a new line
            res: Gen[str] = (f"\n\033[1;32m{na[i]}\033[00m {ve[i]}\n{de[i]}\n"
                             for i in range(5))
            return ''.join(res)
        except IndexError:
            return '\nResult not found\n'



if __name__ == '__main__':

    q = argv[1]
    if not q:
        # If a search string is not passed python q is an empty string, so a
        # little help is printed and the script exits with a return code of 1,
        # so that bash can know that an error ocurred
        print('\nEmpty search string.\n' + \
              'Use pip search <module> or pypi_search <module>\n')
        _exit(1)
    print(Results(q))
